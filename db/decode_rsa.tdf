--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=8 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_rsa
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[7..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[7..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode3533w[3..0]	: WIRE;
	w_anode3550w[3..0]	: WIRE;
	w_anode3560w[3..0]	: WIRE;
	w_anode3570w[3..0]	: WIRE;
	w_anode3580w[3..0]	: WIRE;
	w_anode3590w[3..0]	: WIRE;
	w_anode3600w[3..0]	: WIRE;
	w_anode3610w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[7..0] = eq_wire[7..0];
	eq_wire[] = ( w_anode3610w[3..3], w_anode3600w[3..3], w_anode3590w[3..3], w_anode3580w[3..3], w_anode3570w[3..3], w_anode3560w[3..3], w_anode3550w[3..3], w_anode3533w[3..3]);
	w_anode3533w[] = ( (w_anode3533w[2..2] & (! data_wire[2..2])), (w_anode3533w[1..1] & (! data_wire[1..1])), (w_anode3533w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode3550w[] = ( (w_anode3550w[2..2] & (! data_wire[2..2])), (w_anode3550w[1..1] & (! data_wire[1..1])), (w_anode3550w[0..0] & data_wire[0..0]), enable_wire);
	w_anode3560w[] = ( (w_anode3560w[2..2] & (! data_wire[2..2])), (w_anode3560w[1..1] & data_wire[1..1]), (w_anode3560w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode3570w[] = ( (w_anode3570w[2..2] & (! data_wire[2..2])), (w_anode3570w[1..1] & data_wire[1..1]), (w_anode3570w[0..0] & data_wire[0..0]), enable_wire);
	w_anode3580w[] = ( (w_anode3580w[2..2] & data_wire[2..2]), (w_anode3580w[1..1] & (! data_wire[1..1])), (w_anode3580w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode3590w[] = ( (w_anode3590w[2..2] & data_wire[2..2]), (w_anode3590w[1..1] & (! data_wire[1..1])), (w_anode3590w[0..0] & data_wire[0..0]), enable_wire);
	w_anode3600w[] = ( (w_anode3600w[2..2] & data_wire[2..2]), (w_anode3600w[1..1] & data_wire[1..1]), (w_anode3600w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode3610w[] = ( (w_anode3610w[2..2] & data_wire[2..2]), (w_anode3610w[1..1] & data_wire[1..1]), (w_anode3610w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
